# -*- coding: utf-8 -*-
"""pycaret.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/angad68/e1e1a9f698efe5d971044af5a1cbb22a/pycaret.ipynb
"""

!pip install pycaret &> /dev/null
print ("Pycaret installed sucessfully!!")

from pycaret.utils import version
version()

from pycaret.datasets import get_data

dataSets = get_data('index')

df=get_data('insurance')

df

df.to_csv('dataset.csv')

setup(data = df, target = 'charges',
      train_size = 0.7,
      data_split_shuffle = False,
      verbose = False,
      normalize = True,
      normalize_method = 'zscore')

cm = compare_models()

from pycaret.datasets import get_data
from pycaret.regression import *

myDataSet = get_data("insurance", verbose = False)

setup(data = df, target = 'charges',
      train_size = 0.7,
      data_split_shuffle = False,
      verbose = False,
      normalize = True,
      normalize_method = 'zscore')


rfModel = create_model('rf', verbose = False)

plot_model(rfModel, plot = 'feature')

from pycaret.datasets import get_data
from pycaret.regression import *

myDataSet = get_data("insurance", verbose = False)

setup(data = df, target = 'charges',
      train_size = 0.7,
      data_split_shuffle = False,
      feature_selection = True,
      feature_selection_method = 'univariate',
      n_features_to_select = 0.2,
      verbose = False)

cm = compare_models()

from pycaret.datasets import get_data
from pycaret.regression import *
myDataSet = get_data("insurance", verbose = False)

setup(data = myDataSet, target = 'charges',
      train_size=0.7,
      remove_outliers = True,
      outliers_method = "iforest",
      outliers_threshold = 0.05,
      verbose = False)

cm = compare_models()

from pycaret.datasets import get_data
from pycaret.regression import *
myDataSet = get_data("insurance", verbose = False)

setup(data = myDataSet, target = 'charges',
      transformation = True,
      transformation_method = 'yeo-johnson',
      verbose = False)

cm = compare_models()

from pycaret.datasets import get_data
from pycaret.regression import *
myDataSet = get_data("insurance", verbose = False)

setup(data = myDataSet, target = 'charges',
      remove_outliers = True,
      outliers_threshold = 0.05,
      normalize = True,
      normalize_method = 'zscore',
      data_split_shuffle = False,
      fold = 2,
      verbose = False)

cm = compare_models()

from pycaret.datasets import get_data
from pycaret.regression import *
myDataSet = get_data("insurance", verbose = False)

setup(data = myDataSet, target = 'charges',
      remove_outliers = True,
      outliers_threshold = 0.05,
      normalize = True,
      normalize_method = 'zscore',
      transformation = True,
      transformation_method = 'yeo-johnson',
      data_split_shuffle = False,
      fold = 2,
      verbose = False)

cm = compare_models()

from pycaret.datasets import get_data
from pycaret.regression import *
myDataSet = get_data("insurance", verbose = False)

setup(data =  myDataSet, target = 'charges', verbose = False)

rf = create_model('rf')
# Explore more parameters

newdf=get_data("insurance").iloc[:10]

newPredictions = predict_model(rf, data = newdf)

import matplotlib.pyplot as plt

predicted = newPredictions.iloc[:,-1]     # Last column
actual = newPredictions.iloc[:,-2]        # 2nd last column

plt.scatter(actual, predicted)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Actual Vs Predicted')
plt.savefig("result-scatter-plot.jpg", dpi = 300)
plt.show()

from google.colab import files

newPredictions.to_csv("NewPredictions.csv", index = False)

sm = save_model(rfModel, 'rfModelFile')

rfModel = load_model('rfModelFile')

newdf

newPred = predict_model(rfModel, data=newdf)

"""# New Section"""

rfModel = create_model('rf')

plot_model(rfModel, plot='error')

plot_model(rfModel, plot='learning')

plot_model(rfModel, plot='vc')

plot_model(rfModel, plot='parameter')

rfModel = create_model('rf', verbose=False)
plot_model(rfModel, plot='feature')

etModel = create_model('et', verbose=False)
plot_model(etModel, plot='feature')

dtModel = create_model('dt', verbose=False)
plot_model(dtModel, plot='feature')

dtModel = create_model('dt')

dtModelTuned = tune_model(dtModel, n_iter = 50)

from pycaret.datasets import get_data
boston = get_data('insurance')

from pycaret.regression import *

exp_name = setup(data = boston,  target = 'charges')
top3 = compare_models(n_select = 3)
tuned_top3 = [tune_model(i) for i in top3]

blender = blend_models(tuned_top3)

stacker = stack_models(tuned_top3)

best_mae_model = automl(optimize = 'MAE')

